#!/bin/bash
LANG=C

function failed () {
		result=FAILED
}

function passed () {
		result=PASSED
}

function log_result () {
		echo "$1: $result"
}

function mountpoint_configured () {
		if [ -n "$(findmnt -n $1)" ]; then
				passed
		else
				failed
		fi
		log_result "$1 is configured"
}

function filesystem_option () {
		if [ -z "$(findmnt -n "$1" | grep -v "$2")" ]; then
				failed
		else
				passed
		fi
		log_result "$1 option $2 set"
}

function module_check () {
		if [ "$(modprobe -n -v $1 | grep -E '($1|install)')" = '/install/bin/true' ] && [ -z "$(lsmod | grep "$1")" ]; then
				passed
				return 0
		else
				failed
				return 1
		fi
}

function package_check () {
		if [ "$(dpkg -s "$1" 2>/dev/null | grep -E '(Status:|not installed)')" = 'Status: install ok installed' ]; then
				passed
				return 0
		else
				failed
				return 1
		fi
}

function package_not_check () {
		if ! [ "$(dpkg -s "$1" 2>/dev/null | grep -E '(Status:|not installed)')" = 'Status: install ok installed' ]; then
				passed
				return 0
		else
				failed
				return 1
		fi
}

function package_installed () {

		[ -z "$(dpkg -l "$1")" ] && passed && return 0
		failed && return 1

}

function permission_check () {
		if ! [ -f "$1" ]; then
				failed
		else
			access=$(stat -c '%a' "$1")
			uid=$(stat -c '%u' "$1")
			gid=$(stat -c '%g' "$1")

			if [ "$uid" -ne 0 ] || [ "$gid" -ne 0 ]; then
					failed
			fi

			if [ "$access" -ne $2 ]; then
					failed
			fi
		fi
		log_result "Ensure permissions on $1 are configured"
}

function systemd_check () {
		if [ "$(systemctl is-enabled systemd-timesyncd)" = 'enabled' ]; then
				passed
				return 0
		else
				failed
				return 1
		fi
}

function systemd_running () {
		if [ -n "$(systemctl status "$1" | grep 'Active: active (running) ')" ]; then
				passed
				return 0
		else
				failed
				return 1
		fi
}

function ip6_network_check() {
		failed
		[ "$(sysctl net.ipv6.conf.all.$1)" = "net.ipv6.conf.all.$1 = $2" ] && \
		[ "$(sysctl net.ipv6.conf.default.$1)" = "net.ipv6.conf.default.$1 = $2" ] && \
		[ "$(grep "net\.ipv6\.conf\.all\.$1" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.conf.all.$1= $2" ] && \
		[ "$(grep "net\.ipv6\.conf\.default\.$1" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv6.conf.default.$1= $2" ] && \
		passed
}

function network_config_check() {
	ok=false
	[ "$(sysctl net.ipv4.conf.all.$1)" = "net.ipv4.conf.all.$1 = $2" ] && \
	[ "$(sysctl net.ipv4.conf.default.$1)" = "net.ipv4.conf.default.$1 = $2" ] && \
	[ "$(grep "net\.ipv4\.conf\.all\.$1" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.conf.all.$1= $2" ] && \
	[ "$(grep "net\.ipv4\.conf\.default\.$1" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.conf.default.$1= $2" ] && \
	ok=true

	! $ok && failed && return
	
	if $ipv6 && $3; then
			ip6_network_check "$1" "$2"
	else
			passed
	fi
}

function journald_check () {
if [ "$(grep -e "$1" /etc/systemd/journald.conf)" = "$2" ]; then
		passed
else
		failed
fi
}

function file_not_check () {
		if ! [ -f "$1" ]; then
				passed
		else
				failed
		fi

		log_result "File $1 does not exist" 
}

if [ "$EUID" -ne 0 ]; then 
		echo "Please run as root"
		exit
fi

if [ -n "$(./ipv6.sh)" ]; then
		ip6=true
else
		ip6=false
fi

# 1.1
filesystems_to_disable=(cramfs freevxfs jffs2 hfs hfsplus squashfs udf)

for filesystem in "${filesystems_to_disable[@]}"
do
		module_check $filesystem
		log_result "Filesystem $filesystem disabled"
done

tmpfs_mountpoints=(/tmp /dev/shm /var/tmp)

for mountpoint in "${tmpfs_mountpoints[@]}"
do
		mountpoint_configured "$mountpoint"
		if [ $result = PASSED ]; then
				tmp_options=(nodev nosuid noexec)
				for option in "${tmp_options[@]}"
				do
						filesystem_option "$mountpoint" "$option"
				done
		fi
done

mountpoints=(/var/log /var/log/audit /home)
for mountpoint in "${mountpoints[@]}"
do
		mountpoint_configured "$mountpoint"
done

filesystem_option /home nodev

# 1.1.22
if [ -z $(df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null) ]
then
		passed
else
		failed
fi
log_result "Ensure sticky bit is set on all world-writable directories"

# 1.1.23
if ! [ "$(systemctl is-enabled autofs 2>/dev/null)" = "enabled" ]; then
		passed
else
		failed
fi

# 1.1.24
module_check usb-storage
log_result "Disable USB Storage"

# 1.3.1
package_check aide
package_check aide-common
log_result "Ensure AIDE is installed"

# 1.3.2
if [ -n "$(grep -Ers '^([^#]+\s+)?(\/usr\/s?bin\/|^\s*)aide(\.wrapper)?\s(--check|\$AIDEARGS)\b' /etc/cron.* /etc/crontab /var/spool/cron/)" ]; then
		passed
else
		failed
fi
log_result "Ensure filesystem integrity is regularly checked"

# 1.4.1
valid_output=$(echo -n 'if [ "x${grub_cfg}" != "x" ]; then\nchmod 400 ${grub_cfg}.new || true\nfi')
if [ "$(grep -E '^\s*chmod\s+[0-7][0-7][0-7]\s+\$\{grub_cfg\}\.new' -A1 -B1 /usr/sbin/grub-mkconfig)" = "$valid_output" ]; then
		passed
else
		failed
fi
log_result "Ensure permissions on bootloader config are not overridden"

# 1.4.2
if grep -q "^set superusers" /boot/grub/grub.cfg && grep -q "^password" /boot/grub/grub.cfg; then
		passed
else
		failed
fi
log_result "Ensure bootloader password is set"

# 1.4.3
permission_check /boot/grub/grub.cfg 400

# 1.4.4
if [ -z "$(grep -Eq '^root:\$[0-9]' /etc/shadow || echo "root is locked")" ]; then
		passed
else
		failed
fi
log_result "Ensure authentication required for single user mode"

# 1.7.1

if [ -z "$(grep -Eis "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/motd)" ]; then
		passed
else
		failed
fi

log_result "Ensure message of the day is configured properly"

# 1.7.2

if [ -z "$(grep -E -i "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/issue)" ]; then
		passed
else
		failed
fi
log_result "Ensure local login warning banner is configured properly"

# 1.7.3

if [ -z "$(grep -E -i "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/issue.net)" ]; then
		passed
else
		failed
fi
log_result "Ensure remote login warning banner is configured properly"

# 1.7.4
permission_check /etc/motd 644

# 1.7.5
permission_check /etc/issue 644

# 1.7.6
permission_check /etc/issue.net 644

# 2.1.1
if systemd_check systemd-timesyncd; then
		if package_check chrony || package_check ntp; then
				failed
		else
				passed
		fi
fi

if package_check chrony; then
		if package_check ntp || ! [ $(systemctl is-enabled systemd-timesyncd) = 'masked' ]; then
				failed
		else
				passed
		fi
fi

if package_check ntp; then
		if package_check chrony || ! [ $(systemctl is-enabled systemd-timesyncd) = 'masked' ]; then
				failed
		else
				passed
		fi
fi

log_result "Ensure time synchronization is in use"

# 2.1.2
package_installed 'xserver-xorg*' 
log_result "Ensure X Window System is not installed"

# 2.1.3
package_not_check 'avahi-daemon'
log_result "Ensure Avahi Server is not installed"

# 2.1.4
package_not_check 'cups'
log_result "Ensure CUPS is not installed"

# 2.1.5
package_not_check 'isc-dhcp-server'
log_result "Ensure DHCP server is not installed"

# 2.1.6
package_not_check 'slapd'
log_result "Ensure LDAP server is not installed"

# 2.1.7
package_not_check 'nfs-kernel-server'
log_result "Ensure NFS is not installed"

# 2.1.8
package_not_check 'bind9'
log_result "Ensure DNS server is not installed"

# 2.1.9
package_not_check 'vsftpd'
log_result "Ensure FTP server is not installed"

# 2.1.10
package_not_check 'apache2'
log_result "Ensure HTTP server is not installed"

# 2.1.11
package_not_check 'dovecot-imapd' && package_not_check 'dovecot-pop3d'
log_result "Ensure LDAP server is not installed"

# 2.1.12
package_not_check 'samba'
log_result "Ensure Samba is not installed"

# 2.1.13
package_not_check 'squid'
log_result "Ensure HTTP proxy server is not installed"

# 2.1.14
package_not_check 'snmpd'
log_result "Ensure SNMP server is not installed"

# 2.1.15
if [ -z "$(ss -lntu | grep -E ':25\s' | grep -E -v '\s(127.0.0.1|::1):25\s')" ]; then
		passed
else
		failed
fi

# 2.1.16
package_not_check 'rsync'
log_result "Ensure rsync service is not installed"

# 2.1.17
package_not_check 'nis'
log_result "Ensure NIS server is not installed"

# 2.2.1
package_not_check 'nis'
log_result "Ensure NIS client is not installed"

# 2.2.2
package_not_check 'rsh-client'
log_result "Ensure rsh client is not installed"

# 2.2.3
package_not_check 'talk'
log_result "Ensure talk client is not installed"

# 2.2.4
package_not_check 'telnet'
log_result "Ensure telnet client is not installed"

# 2.2.5
package_not_check 'ldap-utils'
log_result "Ensure LDAP client is not installed"

# 2.2.6
package_not_check 'rpc-bind'
log_result "Ensure RPC client is not installed"

# 3.1.2
if [ "$(./wireless.sh)" = 'Wireless is not enabled' ]; then
		passed
else
		failed
fi
log_result "Ensure wireless interfaces are disabled"

# 3.2.1
failed
[ "$(sysctl net.ipv4.conf.all.send_redirects)" = 'net.ipv4.conf.all.send_redirects = 0' ] && \
[ "$(sysctl net.ipv4.conf.default.send_redirects)" = 'net.ipv4.conf.default.send_redirects = 0' && \
[ "$(grep -E "^\s*net\.ipv4\.conf\.all\.send_redirects" /etc/sysctl.conf)" = 'net.ipv4.conf.all.send_redirects = 0' && \
[ "$(grep -E "^\s*net\.ipv4\.conf\.default\.send_redirects" /etc/sysctl.conf /etc/sysctl.d/*)" = 'net.ipv4.conf.default.send_redirects= 0'] && \ 
passed 

log_result "Ensure packet redirect sending is disabled"

# 3.2.2
failed
[ "$(sysctl net.ipv4.ip_forward)" = 'net.ipv4.ip_forward = 0' ] && \
[ -z "$(grep -E -s "^\s*net\.ipv4\.ip_forward\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf)" ] && \

if $ip6; then
		[ "$(sysctl net.ipv6.conf.all.forwarding)" = 'net.ipv6.conf.all.forwarding = 0' ] && \
		[ -z "$(grep -E -s "^\s*net\.ipv6\.conf\.all\.forwarding\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf)" ] && \
		passed
else
		passed
fi

log_result "Ensure IP forwarding is disabled"

# 3.3.1
network_config_check accept_source_route 0 true
log_result "Ensure source routed packets are not accepted"

# 3.3.2
network_config_check accept_redirects 0 true
log_result "Ensure ICMP redirects are not accepted"

# 3.3.3
network_config_check secure_redirects 0 false
log_result "Ensure secure ICMP redirects are not accepted"

# 3.3.4
network_config_check log_martians 1 false
log_result "Ensure suspicious packets are logged"

# 3.3.5
failed
[ "$(sysctl net.ipv4.icmp_echo_ignore_broadcasts)" = "net.ipv4.icmp_echo_ignore_broadcasts = 1" ] && \
[ "$(grep "net\.ipv4\.icmp_echo_ignore_broadcasts" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.icmp_echo_ignore_broadcasts = 1" ] && \
passed

log_result "Ensure broadcast ICMP requests are ignored"

# 3.3.6
failed
[ "$(sysctl net.ipv4.icmp_ignore_bogus_error_responses)" = "net.ipv4.icmp_ignore_bogus_error_responses = 1" ] && \
[ "$(grep "net.ipv4.icmp_ignore_bogus_error_responses" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.icmp_ignore_bogus_error_responses = 1" ] && \
passed

log_result "Ensure bogus ICMP responses are ignored"

# 3.3.7
network_config_check rp_filter 1 false
log_result "Ensure Reverse Path Filtering is enabled"

# 3.3.8
failed
[ "$(sysctl net.ipv4.tcp_syncookies)" = "net.ipv4.tcp_syncookies = 1" ] && \
[ "$(grep "net.ipv4.tcp_syncookies" /etc/sysctl.conf /etc/sysctl.d/*)" = "net.ipv4.tcp_syncookies = 1" ] && \
passed

log_result "Ensure TCP SYN Cookies is enabled"

# 3.3.9
ip6_network_check accept_ra 1
log_result "Ensure IPv6 router advertisements are not accepted"

# 3.4.1
module_check dccp
log_result "Ensure DCCP is disabled"

# 3.4.2
module_check sctp
log_result "Ensure SCTP is disabled"

# 3.4.3
module_check rds
log_result "Ensure RDS is disabled"

# 3.4.4
module_check tipc
log_result "Ensure TIPC is disabled"

# 3.5.3.1.1
if [ -n "$(apt list iptables iptables-persistent | grep installed)" ]; then
		passed
else
		failed
fi

log_result "Ensure iptables packages are installed"

# 3.5.3.1.2
package_not_check nftables
log_result "Ensure nftables is not installed with iptables"

# 3.5.3.1.3
if package_not_check ufw || [ "$(ufw status)" = 'Status: inactive' ] || [ "$(systemctl is-enabled ufw)" = masked ]; then
		passed
else
		failed
fi
log_result "Ensure ufw is not installed with iptables"

# 4.2.1.1
package_check rsyslog
log_result 'Ensure rsyslog is installed'

# 4.2.1.2
systemd_check rsyslog
log_result 'Ensure rsyslog Service is enabled' 

# 4.2.2.1
journald_check ForwardToSyslog ForwardToSyslog=yes 
log_result 'Ensure journald is configured to send logs to rsyslog'

# 4.2.2.2
journald_check Compress Compress=yes 
log_result 'Ensure journald is configured to compress large log files'

# 4.2.2.3
journald_check Storage Storage=persistent 
log_result 'Ensure journald is configured to compress large log files'

# 5.1.1
if systemd_check cron && systemd_running cron; then
		passed
else
		failed
fi
log_result 'Ensure cron daemon is enabled and running'

# 5.1.2-5.1.9
permission_check /etc/crontab 600
permission_check /etc/cron.hourly/ 700
permission_check /etc/cron.daily/ 700
permission_check /etc/cron.weekly/ 700
permission_check /etc/cron.monthly/ 700
permission_check /etc/cron.d/ 700
permission_check /etc/cron.allow/ 640
file_not_check /etc/cron.deny
permission_check /etc/at.allow/ 640
file_not_check /etc/at.deny

# 5.2
failed
package_check sudo || package_check sudo-ldap && passed
log_result 'Sudo installed'

failed
if [ -n "$(grep -Ei '^\s*Defaults\s+([^#]+,\s*)?use_pty(,\s+\S+\s*)*(\s+#.*)?$' /etc/sudoers /etc/sudoers.d/*)" ]; then
		passed
fi
log_result 'Sudo pty'

failed
[ -n "$(grep -Ei '^\s*Defaults\s+logfile=\S+' /etc/sudoers /etc/sudoers.d/*)" ] && passed
log_result 'Sudo log'

# 5.3
permission_check /etc/ssh/sshd_config 600

while read file 
do
		permission_check "$file" 600
done < <(find /etc/ssh -xdev -type f -name 'ssh_host_*_key')

while read file 
do
		permission_check "$file" 644
done < <(find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub')

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -Ei '^\s*(allow|deny)(users|groups)\s+\S+')" =~ allowusers|allowgroups|denyusers|denygroups ]]; then
		passed
fi
log_result 'SSH access is limited'

failed
if [[ -z "$(grep -is 'loglevel' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi '(VERBOSE|INFO)')" ]]; then
		passed
fi
log_result 'SSH log level'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i x11forwarding)" = 'x11forwarding no' ]] && \
		[[ -z "$( grep -Eis '^\s*x11forwarding\s+yes' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
		passed
fi
log_result 'SSH x11 forwarding'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep maxauthtries)" = 'maxauthtries 4' ]] && \
		[[ -z "$(grep -Eis '^\s*maxauthtries\s+([5-9]|[1-9][0-9]+)' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH max auth tries'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep ignorerhosts)" = 'ignorerhosts yes' ]] && \
		[[ -z "$(grep -Eis '^\s*ignorerhosts\s+no\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH rhosts'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep hostbasedauthentication)" = 'hostbasedauthentication no' ]] && \
		[[ -z "$(grep -Eis '^\s*HostbasedAuthentication\s+yes' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH host based auth'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep permitrootlogin)" = 'permitrootlogin no' ]] && \
		[[ -z "$(grep -Eis '^\s*PermitRootLogin\s+yes' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH root login'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep permitemptypasswords)" = 'permitemptypasswords no' ]] && \
		[[ -z "$(grep -Eis '^\s*PermitEmptyPasswords\s+yes' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH empty password'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep permituserenvironment)" = 'permituserenvironment no' ]] && \
		[[ -z "$(grep -Eis '^\s*PermitUserEnvironment\s+yes' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH permit user environment'

failed
if [[ -z "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -Ei '^\s*ciphers\s+([^#]+,)?(3des-cbc|aes128-cbc|aes192-cbc|aes256-cbc|arcfour|arcfour128|arcfour256|blowfish-cbc|cast128-cbc|rijndael-cbc@lysator.liu.se)\b')" ]] && \
		[[ -z "$(grep -Eis '^\s*ciphers\s+([^#]+,)?(3des-cbc|aes128-cbc|aes192-cbc|aes256-cbc|arcfour|arcfour128|arcfour256|blowfish-cbc|cast128-cbc|rijndael-cbc@lysator.liu.se)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH strong ciphers'

failed
if [[ -z "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -Ei '^\s*macs\s+([^#]+,)?(hmac-md5|hmac-md5-96|hmac-ripemd160|hmac-sha1|hmac-sha1-96|umac-64@openssh\.com|hmac-md5-etm@openssh\.com|hmac-md5-96-etm@openssh\.com|hmac-ripemd160-etm@openssh\.com|hmac-sha1-etm@openssh\.com|hmac-sha1-96-etm@openssh\.com|umac-64-etm@openssh\.com|umac-128-etm@openssh\.com)\b')" ]] && \
		[[ -z "$(grep -Eis '^\s*macs\s+([^#]+,)?(hmac-md5|hmac-md5-96|hmac-ripemd160|hmac-sha1|hmac-sha1-96|umac-64@openssh\.com|hmac-md5-etm@openssh\.com|hmac-md5-96-etm@openssh\.com|hmac-ripemd160-etm@openssh\.com|hmac-sha1-etm@openssh\.com|hmac-sha1-96-etm@openssh\.com|umac-64-etm@openssh\.com|umac-128-etm@openssh\.com)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH strong MAC'

failed
if [[ -z "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -Ei '^\s*kexalgorithms\s+([^#]+,)?(diffie-hellman-group1-sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\b')" ]] && \
		[[ -z "$(grep -Ei '^\s*kexalgorithms\s+([^#]+,)?(diffie-hellman-group1-sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\b' /etc/ssh/sshd_config)" ]]; then
passed
fi
log_result 'SSH key exchange'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep clientaliveinterval | awk '{print $2}')" -le 300 ]] && \
		[[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep clientalivecountmax | awk '{print $2}')" -le 3 ]] && \
		[[ -z "$(grep -Eis '^\s*clientaliveinterval\s+(0|3[0-9][1-9]|[4-9][0-9][0-9]|[1-9][0-9][0-9][0-9]+|[6-9]m|[1-9][0-9]+m)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]] && \
		[[ -z "$(grep -Eis '^\s*ClientAliveCountMax\s+(0|[4-9]|[1-9][0-9]+)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH idle timeout'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep logingracetime | awk '{print $2}')" -le 60 ]] && \
		[[ -z "$(grep -Eis '^\s*LoginGraceTime\s+(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+|[^1]m)' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH login grace time'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep banner)" = 'banner /etc/issue.net' ]] && \
		[[ -z "$(grep -Eis '^\s*Banner\s+"?none\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH warning banner'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i usepam)" = 'usepam yes' ]] && \
		[[ -z "$(grep -Eis '^\s*UsePAM\s+no' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH use PAM'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i allowtcpforwarding)" = 'allowtcpforwarding no' ]] && \
		[[ -z "$(grep -Eis '^\s*AllowTcpForwarding\s+yes\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH TCP forwarding'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i maxstartups)" = 'maxstartups 10:30:60' ]] && \
		[[ -z "$(grep -Eis '^\s*maxstartups\s+(((1[1-9]|[1-9][0-9][0-9]+):([0-9]+):([0-9]+))|(([0-9]+):(3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0-9]+):([0-9]+):(6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+)))' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH max startups'

failed
if [[ "$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i maxsessions | awk '{print $2}')" -le 10 ]] && \
		[[ -z "$(grep -Eis '^\s*MaxSessions\s+(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf)" ]]; then
passed
fi
log_result 'SSH max sessions'

failed
valid_output="$(echo -e 'dcredit = -1\nucredit = -1\nlcredit = -1\nocredit = -1')"
if [[ "$(grep '^\s*minlen\s*' /etc/security/pwquality.conf)" = 'minlen = 14' ]]; then
		if [[ "$(grep '^\s*minclass\s*' /etc/security/pwquality.conf)" = 'minclass = 4' ]] || \
				[[ "$(grep -E '^\s*[duol]credit\s*' /etc/security/pwquality.conf)" = "$valid_output" ]]; then
						if [[ "$(grep -E '^\s*password\s+(requisite|required)\s+pam_pwquality\.so\s+(\S+\s+)*retry=[1-3]\s*(\s+\S+\s*)*(\s+#.*)?$' /etc/pam.d/common-password | cut -d= -f2)" -le 3 ]]; then
								passed
						fi
		fi
fi
log_result 'PAM password quality'

failed
if [[ -n "$(grep "pam_tally2" /etc/pam.d/common-auth)" ]] && \
		[[ -n "$(grep -E "pam_(tally2|deny)\.so" /etc/pam.d/common-account)" ]]; then
passed
fi
log_result 'PAM lockout'

failed
if [[ "$(grep -E '^\s*password\s+required\s+pam_pwhistory\.so\s+([^#]+\s+)?remember=([5-9]|[1- 9][0-9]+)\b' /etc/pam.d/common-password | cut -d= -f2)" -ge 5 ]]; then
		passed
fi
log_result 'PAM prevent password reuse'

# 6.1
permission_check /etc/passwd 644
permission_check /etc/passwd- 644
permission_check /etc/group 644
permission_check /etc/group- 644
permission_check /etc/shadow 640
permission_check /etc/shadow- 640
permission_check /etc/gshadow 640
permission_check /etc/gshadow- 640

failed
if [[ -z "$(df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002)" ]]; then
		passed
fi
log_result 'World writable files'

failed
if [[ -z "$(df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser)" ]]; then
		passed
fi
log_result 'Unowned files'

failed
if [[ -z "$(df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup)" ]]; then
		passed
fi
log_result 'Ungrouped files'

failed
if [[ -z "$(awk -F: '($2 != "x" ) { print $1 " is not set to shadowed passwords "}' /etc/passwd)" ]]; then
		passed
fi
log_result 'Shadow password'

failed
if [[ -z "$(awk -F: '($2 == "" ) { print $1 " does not have a password "}' /etc/shadow)" ]]; then
		passed
fi
log_result 'No password'

failed
if [[ -z "$(./groups-exist.sh)" ]]; then
		passed
fi
log_result 'Valid groups'

failed
if [[ -z "$(./users-home.sh)" ]]; then
		passed
fi
log_result 'Users home'

#failed
#if [[ -z "$(./users-own-home.sh)" ]]; then
#		passed
#fi
#log_result 'Users own home files'

failed
if [[ -z "$(./users-permission-home.sh)" ]]; then
		passed
fi
log_result 'Users home permission'

failed
if [[ -z "$(./dot-files.sh)" ]]; then
		passed
fi
log_result 'Dotfiles no world writable'

failed 
if [[ -z "$(./dot-forward.sh)" ]]; then
		passed
fi
log_result '.forward'

failed 
if [[ -z "$(./dot-rhosts.sh)" ]]; then
		passed
fi
log_result '.rhosts'

failed
if [[ "$(awk -F: '($3 == 0) { print $1 }' /etc/passwd)" = 'root' ]]; then
		passed
fi
log_result 'root user'

failed
if [[ -z "$(./path-integrity.sh)" ]]; then
		passed
fi
log_result 'path integrity'

failed
if [[ -z "$(./duplicate-uid.sh)" ]]; then
		passed
fi
log_result 'duplicate uid'

failed
if [[ -z "$(./duplicate-gid.sh)" ]]; then
		passed
fi
log_result 'duplicate gid'

failed
if [[ -z "$(./duplicate-username.sh)" ]]; then
		passed
fi
log_result 'duplicate username'

failed
if [[ -z "$(./duplicate-groupname.sh)" ]]; then
		passed
fi
log_result 'duplicate groupname'

failed
if [[ -z "$(awk -F: '($1=="shadow") {print $NF}' /etc/group)" ]] && \
		[[ -z "$(awk -F: -v GID="$(awk -F: '($1=="shadow") {print $3}' /etc/group)" '($4==GID) {print $1}' /etc/passwd)" ]]; then
passed
fi
log_result 'empty shadow group'
